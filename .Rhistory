attributes_xlsx
library(xlsx)
library(dplyr)
# Import .xlsx file
bully_xlsx = read.xlsx("data/EXERCISE006.xlsx", sheetName = "Bullying", header = TRUE)
# Fix the column types (from dbl to int)
bully_xlsx = bully_xlsx %>%
mutate_if(is.numeric, as.integer)
# Set the first column as Row Index
bully_xlsx = data.frame(bully_xlsx[,-1], row.names = bully_xlsx[,1])
# Convert the data to a matrix
bully_matrix = as.matrix(bully_xlsx)
bully_matrix
library(sna)
# Convert the matrix into a "network" object
bully_network = as.network(bully_matrix, directed = TRUE)
bully_network
# Import .xlsx attributes data
attributes_xlsx = read.xlsx("data/EXERCISE006.xlsx", sheetName = "Attributes", header = TRUE)
attributes_xlsx
# Add indegree and outdegree values to our dataset
merge_df <- merge(attributes_xlsx, by.x = "ID", by.y = "id")
# Add indegree and outdegree values to our dataset
merge_df <- merge(attributes_xlsx, degree_df, by.x = "ID", by.y = "id")
# Set nodes name as id
id = rownames(bully_xlsx)
# Calculate indegree
indegree = sna::degree(bully_network, gmode = "digraph", cmode = "indegree")
# Calculate outdegree
outdegree = sna::degree(bully_network, gmode = "digraph", cmode = "outdegree")
# Calculate centrality
freeman = sna::degree(bully_network, gmode = "digraph", cmode = "freeman")
# Create a dataset to stor these infromation
degree_df = data.frame(id, indegree, outdegree, freeman)
degree_df
# Add indegree and outdegree values to our dataset
merge_df <- merge(attributes_xlsx, degree_df, by.x = "ID", by.y = "id")
merge_df
# Calculate correlation
cor.test(merge_df$Grade, merge_df$ondegree)
# Calculate correlation
cor.test(merge_df$Grade, merge_df$indegree)
library(ggplot2)
# Plot the indegree-grade scatterplot
ggplot(merge_df, aes(x=indegree, y=Grade)) +
geom_point(size=3) +
# add regression line
geom_smooth(method=lm , color="red", se=FALSE)
# Calculate correlation
cor.test(merge_df$Grade, merge_df$outdegree)
# Plot the indegree-grade scatterplot using ggplot2
ggplot(merge_df, aes(x=outdegree, y=Grade)) +
geom_point(size=3) +
geom_smooth(method=lm , color="red", se=FALSE)
# Set seed in order to get a reproducible random result
set.seed(1)
# Create the number of permutations value (to be easily changed)
n_permutation = 20000
# Build a permutation based approach to test for significance
OUTPUT<-matrix(NA,n_permutation,1)
for (k in c(1:n_permutation))
{
grade_PERM<-sample(merge_df$Grade) # grade permutation
OUTPUT[k,1]<-cor(merge_df$indegree, grade_PERM)
}
# Plot the results as an histrogram
hist(OUTPUT, nclass=30, prob=T)
# add upper bounder
abline(v = mean(OUTPUT) + sd(OUTPUT)*1.96, col = "red", lwd = 3) # 0.4012781
# add lower bounder
abline(v = mean(OUTPUT) - sd(OUTPUT)*1.96, col = "red", lwd = 3) # -0.4001141
# Assign the real value of correlation to a variable
corRealValue = cor(merge_df$Grade, merge_df$Indegree)
# Assign the real value of correlation to a variable
corRealValue = cor(merge_df$Grade, merge_df$indegree)
message("% of times that the correlation were >= the found correlation value \n",
sum(OUTPUT >= +abs(corRealValue))/n_permutation)
message("\n% of times that the correlation were < the found correlation value \n",
sum(OUTPUT <= -abs(corRealValue))/n_permutation)
message("\n% of times that the correlation were >= or < the found correlation value \n",
sum(OUTPUT >= +abs(corRealValue))/n_permutation + sum(OUTPUT <= -abs(corRealValue))/n_permutation)
